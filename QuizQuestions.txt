Q1) Which are legal?
A) var x;
B) var x = 99;
C) private var x = "Hello";
D) var x;
   x = 100;
E) var [] x = {1, 3, 5};

Q2) Given:
public void doStuff(int [] ia) { /* ... */ }

which are legal invocations?

A) int [] ia = null;
   doStuff(ia);
B) doStuff({1, 2, 3})
C) doStuff(int[]{1, 2, 3});
D) doStuff(new int[]{1, 2, 3});

Q) Which print true?
A) var x = "Hello";
   var y = "Hello";
   sout(x == y);

B) var x = "Hello";
   var y = "Hello";
   sout(x.equals(y));

C) var x = new StringBuilder("Hello");
   var y = "Hello";
   sout(x.equals(y));

D) var x = new StringBuilder("Hello");
   var y = new StringBuilder("Hello");
   sout(x.equals(y));

Q) Which compile?
A) int x = 0;
   if (x) { sout("true"); }

B) boolean x = false;
   if (x) { sout("true"); }

C) Boolean x = false;
   if (x) { sout("true"); }

D) if (Math.random() > 5) {
     sout("Big!");
   } elif (Math.random() > 2) {
     sout("not so big");
   } else sout("dunno");

Q) Which compile?

A) int x = 99;
   switch(x) {
   case 99: sout("99");
   default: sout("something else");
   }

B) long x = 99;
   switch(x) {
   case 99: sout("99");
   }

C) String x = "99";
   switch(x) {
   case "99": sout("99");
   default: sout("something else");
   }

D) StringBuilder x = new StringBuilder("99");
   switch(x) {
   case 99: sout("99");
   default: sout("something else");
   }

Q) Given:
    class X {
        static int MAX_VAL = 100;
        int value = 99;
        public void setVal(int x) {
            if (x <= MAX_VAL) value = x;
        }
    }
and:
        X a = new X();
        X b = new X();
        a.setVal(120);
        System.out.print(a.value + ", ");
        b.MAX_VAL = 150;
        a.setVal(140);
        System.out.println(a.value);

What is the result?
    A) 99, 99
    B) 120, 140
    C) 99, 140
    D) Compilation failure
    E) Exception at runtime

Q) Given:
    class Base {
        void doBaseStuff() {
            System.out.println("doBaseStuff");
        }
    }
    class Sub extends Base {
        void doBaseStuff() {
            System.out.println("doSubStuff");
        }
        void doOtherStuff() {
            System.out.println("doOtherStuff");
        }
    }



In the Base and Sub classes, which are true in isolation?
    A) doBaseStuff in Base can be marked public without causing errors
    B) doBaseStuff in Base can be marked private without causing errors
    C) doBaseStuff in Sub can be marked public without causing errors
    D) doBaseStuff in Sub can be marked protected without causing errors
    E) doBaseStuff in Sub can be marked private without causing errors




